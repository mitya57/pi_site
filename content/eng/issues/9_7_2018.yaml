---
title: Issue N7 2018 year 
content:
 - doi: 9.291-304
   link: 9.291-304
   udk: 004.3
   item_authors: Avdeev N. A., Bibilo P. N., Korobkin V. V., Kolodenkova A. E.
   item_name: Verification of VHDL Descriptions Networks of Synchronous Finite State Machines
   item_authors_address:  <b> N. A. Avdeev</b>, avdeev_n@newman.bas-net.by, <b>  P. N. Bibilo</b>, bibilo@newman.bas-net.by, The United Institute of Informatics Problems of the National Academy of Sciences of Belarus, Minsk, 220012, Belarus, <b> V. V. Korobkin</b>, vvk@niimvs.ru, Acad. Kalyaev Scientific Research Institute of Multiprocessor Computer Systems, Taganrog, 347928, Russian Federation, <b> A. E. Kolodenkova</b>, anna82_42@mail.ru, Samara State Technical University, Samara, 443100, Russian Federation
   item_corr_author:  'Bibilo Petr N., Head of Laboratory, The United Institute of Informatics Problems of the National Academy of Sciences of Belarus, 220012, Minsk, Belarus, E-mail: bibilo@newman.bas-net.by'
   item_rec_on:  April 24, 2018
   item_acc_on:  June 07, 2018
   item_annot: |
    <p> Finite state machines are widely applied in the development of digital systems for description of control logic nodes, microprocessors, interface circuits and so on. This work proposes verification procedure of VHDL description of parallel arrays of finite state machines in Questa Sim simulation system. The main advantage of Questa Sim is that the model of finite state machine (FSM) can be verified if it is written according to certain template. Verification is comprised of validating for compliance of VHDL description of finite state machine array with design specifications. The method utilizes the capabilities of the Questa Sim system, which makes it possible to identify the oriented graphs of the transitions of the component machines and to calculate the number of the arc passings in the graphs based on the results of simulation. However, the Questa Sim system does not recognize the FSM network and does not have the means to construct the tests based on the simulation results. Therefore, to solve these problems, it is suggested to store the simulation results — the sequence of input sets (stimuli) and the state tuples of the component machines, and to check the execution of transitions in the state graph of the machine network based on the sequences obtained,and, thus, to conduct the verification. In addition, this article discusses an example of description of FSMs and FSM arrays using VHDL.</p>
   item_keywords: digital systems, VHDL descriptions, verification, simulation, finite state machines
   item_pages: 291–304
   item_citation: 'Avdeev N. A., Bibilo P. N., Korobkin V. V., Kolodenkova A. E. Verification of VHDL Descriptions Networks of Synchronous Finite State Machines, Programmnaya Ingeneria, 2018, vol. 9, no. 7, pp. 291—304.'
 - doi: 9.305-310
   link: 9.305-310
   udk: 004.921
   item_authors: Maltsev A. V.
   item_name: 'Collision Detection of Small-sized Particles with Virtual Objects Based on Depth Buffer'
   item_authors_address: <b> A. V. Maltsev</b>, avmaltcev@mail.ru, Scientific Research Institute for System Analysis of the Russian Academy of Sciences, Moscow, 117218, Russian Federation 
   item_corr_author: "Maltsev Andrey V., Ph.D., Leading Researcher, Scientific Research Institute for System Analysis of the Russian Academy of Sciences, Moscow, 117218, Russian Federation, E-mail: avmaltcev@mail.ru"
   item_rec_on: April 19, 2018
   item_acc_on: May 15, 2018
   item_annot: |
    <p> This paper presents distributed methods to calculate in real-time collision points of small-sized particles, recti-linearly moving along parallel trajectories (for example, water droplets in heavy rain or large snowflakes in windless weather), with three-dimensional objects of virtual environment. Considered solutions are based using the CUDA parallel computing architecture on modern graphics processors and virtual scene depth map generated by means of hardware depth buffer. To create depth map, a fictitious virtual camera is placed to central point of particle systems emitter and scene is rendered from it. The eye vector of the camera (negative Z-axis of view coordinate system) is aligned with particle motion direction. RGB-channels are blocked for writing data, and depth values from z-buffer are stored in single channel floating point texture that is depth map. This texture is converted to format that supported by CUDA, and passed to kernel which calculates current states and positions of particles and also finds their collisions with virtual objects. Based on proposed methods and algorithms, software modules were created and tested in the visualization system developed in Scientific Research Institute for System Analysis of the Russian Academy of Sciences. Complex virtual scenes with different number of particles (from several thousand to several million) were used to evaluate efficiency of the modules and algorithms. It was shown that proposed solutions meet high requirements of real-time visualization. The modules can be used in virtual environment systems, training complexes, virtual laboratories, etc.</p>
   item_keywords: virtual object, particle, graphics processor, visualization, real time, shader, CUDA
   item_pages: 305–310
   item_comment: ' This research was carried out with the financial support of the Russian Foundation for Basic Research in the framework of the scientific project no. 16-07-00796'
   item_citation: ' Maltsev A. V. Collision Detection of Small-sized Particles with Virtual Objects Based on Depth Buffer, Programmnaya Ingeneria, 2018, vol. 9, no. 7, pp. 305—310.'
 - doi: 9.311-317
   link: 9.311-317
   udk: 004.5
   item_authors: "Chitalov D. I., Kalashnikov S. T."
   item_name: Application Development for Meshes Preparation Using FoamyQuadMesh Utility for the OpenFOAM Toolbox
   item_authors_address: ' <b> D. I. Chitalov</b>, cdi9@yandex.ru, <b> S. T. Kalashnikov</b>, Federal State Budget Scientific Institution "South Ural Scientific Center", Chelyabinsk region, Miass, Ilmen reserve, 456317, Russian Federation'
   item_corr_author: 'Chitalov Dmitry I., Junior Researcher, Federal State Budget Scientific Institution "South Ural Scientific Center", Chelyabinsk region, Miass, Ilmen reserve, 456317, Russian Federation, E-mail: cdi9@yandex.ru'
   item_rec_on:  May 07, 2018
   item_acc_on:  May 17, 2018
   item_annot: |
    <p> This article is devoted to the study of the features of preparation of computational meshes (hereinafter — CM) with the help of the utility foamyQuadMesh, which is included in the standard distribution package of OpenFOAM software environment (hereinafter — SE). The aim of the study is the development of software application (foamy-QuadMeshgenerator) with a graphical interface for the preparation of this type of CM. The shortcomings of existing software solutions with a graphical interface for working with computational meshes for OpenFOAM are given. The urgency of designing of a new graphical shell has been formulated. As part of the implementation of the aim, the authors have analyzed the process of CM preparation on the basis of the utility foamyQuadMesh and have proposed a list of development tools. The diagrams reflecting the structure of the created application and the algorithm of the users work with the application are presented. Features of the implementation of the application logic are presented, the novelty of the development is determined. The list of software products required to use the foamyQuadMeshgenerator application is given. The result of the work carried out by the authors is the creation of an original software solution with a graphical interface for the preparation of CM using the foamyQuadMesh utility of OpenFOAM SE. The article shows the results of testing the program on one of the training examples included in the standard OpenFOAM SE distribution package, a link to the GitHub service is provided, where the application is freely available. The practical significance of the development and the prospects for further research in this area have been determined.
    </p>
   item_keywords: graphical user interface, OpenFOAM, Python programming language, open source software, foamyQuadMesh, PyQt library, calculated meshes, Pickle, bash-scripting, ParaView
   item_pages: 311–317
   item_citation: 'Chitalov D. I., Kalashnikov S. T. Application Development for Meshes Preparation Using FoamyQuadMesh Utility for the OpenFOAM Toolbox, Programmnaya Ingeneria, 2018, vol. 9, no. 7, pp. 311—317.'
 - doi: 9.318-331
   link: 9.318-331
   udk: 004.75
   item_authors: Popov S. E., Zamaraev R. Ju., Kharlampenkov I. E.
   item_name: The Web-Service for the Classification of Seismic Events Based on Apache Spark API
   item_authors_address: '<b> S. E. Popov</b>, e-mail: popov@ict.sbras.ru, <b>  R. Ju. Zamaraev</b>, e-mail: zamaraev@ict.sbras.ru, <b> I. E. Kharlampenkov</b>, e-mail: kharlampenkov@ict.sbras.ru, Institute of Computational Technologies SB RAS, Novosibirsk, 630090, Russian Federation '
   item_corr_author: " Popov Semion E., Senior Researcher, Institute of Computational Technologies SB RAS, Novosibirsk, 630090, Russian Federation. E-mail: popov@ict.sbras.ru"
   item_rec_on:  May 29, 2018  
   item_acc_on:  June 13, 2018
   item_annot: |
    <p> The article describes the key points of the service development process for fast automatic classification of seismic signals based on diagnostic templates. The software solutions for the preliminary signal processing and algorithm of parallel computations of the mathematical model for the development of final conclusions on the basis of rating voting are presented. Their integration with the Apache Spark distributed computing system is shown. Performance tests of the classification algorithm for a set of daily signals in various software environments were conducted. It is shown that the launch of the classification algorithm in the context of massively-parallel execution of the problem gives a gain in productivity (a decrease in the operating time) by several tens of times. The service was developed using the libraries React and Redux. The NodeJS platform is used as the runtime environment.
    </p>
   item_keywords:  web service, distributed computing, Apache Spark, classification of seismic events
   item_pages: 318–331
   item_comment: ' The study was carried out with the financial support of the Russian Foundation for Basic Research within the framework of a research project No. 18-07-00013A '
   item_citation: ' Popov S. E., Zamaraev R. Ju., Kharlampenkov I. E. The Web-Service for the Classification of Seismic Events Based on Apache Spark API '
 - doi: 9.332-336
   link: 9.332-336
   udk: 004.4
   item_authors: Skvortsov A. A.
   item_name: The Use of Finite State Machines in the Development of Software for Machines with Complex Structure
   item_authors_address: <b> A. A. Skvortsov</b>, skvalexei@mail.ru, Vyatka State University, Kirov, 610000, Russian Federation 
   item_corr_author: " Skvortsov Alexsey A., Associate Professor, Vyatka State University, Kirov, 610000, Russian Federation. E-mail: skvalexei@mail.ru"
   item_rec_on:  February 03, 2018 
   item_acc_on:  May 31, 2018
   item_annot: |
    <p> The article discusses the decrease in dimensions, the extension management interface, and improving performance of control devices of machine tools, for example lathe-turning lathe, model 1516. The extension management interface, and improving the performance of the operator is simplified by the use of automata-based programming. Replacement of relay-contact control circuit machine on the microcontroller to reduce size, as well as the expansion interface of the machine control and increased productivity leads to the complication of the software of the machine. In this case, often the machine and its individual devices become entities with state-dependent behavior. As we know from the works of A. A. Shalyto [1,2], automata-based programming is suitable for programming entities with state-dependent behavior, where the reaction entity with the same input action can be different and depends on the prehistory of input. The technology of imperative programming for such devices leads to the multiplication of temporary variables (flags) that increases the number of unforeseen states of the program and reduces its reliability. This also reduces the readability of the program, increases its complexity and memory usage. The aim of this work is to evaluate the use and effectiveness of automata-based programming machines with complex control system. An example of the development of a program for lathe-turning lathe model 1516 with the use of combination of technologies on a imperative and automata-based programming. The use of automata-based programming has brought the machine with relay-contact control system on the microcontroller, without disturbing the control logic, to extend the interface of interaction with the operator through indication of speeds and modes, and to parallelize the execution of individual operations on the machine and increase operator productivity. Similarly a program can be developed for other machines with complex control system.
    </p>
   item_keywords: automata-based programming, switch-technology, modelling, state machine, state-dependent behavior, control device, programming of machines, microcontroller, interface, performance
   item_pages: 332–336
   item_citation: 'Skvortsov A. A. The Use of Finite State Machines in the Development of Software for Machines with Complex Structure'
---
